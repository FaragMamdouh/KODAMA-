RunKODAMAmatrix <- function(...) {
    UseMethod("RunKODAMAmatrix")
}

RunKODAMAvisualization <- function(...) {
    UseMethod("RunKODAMAvisualization")
}


refinecluster <- function(...) {
    UseMethod("refinecluster")
}


RunKODAMAmatrix.default = function(data, ...) {
  kk=KODAMA.matrix.parallel(data = data, ...)
  return(kk)
}

RunKODAMAmatrix.SingleCellExperiment = function(object, reduction= "PCA", dims=50, ...) {
  if (!is(object, "SingleCellExperiment")) {
    stop("object is not a SingleCellExperiment object")
  }
  if(reduction =="PCA"){
    data <- SingleCellExperiment::reducedDim(object, "PCA")
    nc <- ncol(data)
    if(nc < dims){
      dims = nc
      message("dims is set higher than the number of principal components")
    }
    data= data[ , 1:dims]
  }
  kk <- KODAMA.matrix.parallel(data = data, ...)
  object@int_colData@listData[["reducedDims"]]@listData[["KODAMA"]] <- kk
  return(object)
}

RunKODAMAmatrix.SpatialExperiment = function(object, reduction= "PCA", dims=50, ...) {
  if (!is(object, "SpatialExperiment")) {
    stop("object is not a spatialExperiment object")
  }
  ##############################################
    #CHECK
    data <- SingleCellExperiment::reducedDim(object, reduction)
    nc <- ncol(data)
    if(nc < dims){
      dims = nc
      message("dims is set higher than the number of features")
    }
    
    data= data[ , 1:dims]
  ##############################################
      
  #spat_coord = NULL
  # In this dataset, the names of the assays are "counts" and "logcounts"
  #if("Spatial"  %in%  names(object@assays)){
    spat_coord<- as.matrix(SpatialExperiment::spatialCoords(object))
   # }

  kk=KODAMA.matrix.parallel(data = data, spatial = spat_coord, ...)
  #I have this error when I run the following line
  
  #SingleCellExperiment::reducedDim(object, "KODAMA") <- kk
  #Error in .set_internal_character(x, type, value, getfun = int_colData,  : 
  #invalid 'value' in 'reducedDim(<SpatialExperiment>, type="character") <- value':
  # 'value' should have number of rows equal to 'ncol(x)'
  
  # X FARAG: a class is organize with specific variables. You cannot simply assign a list to the class reducedDim.
    
 
    
  
  #So I assigned KODAMA object manually
  object@int_colData@listData[["reducedDims"]]@listData[["KODAMA"]] <- kk
  return(object)
}



RunKODAMAmatrix.giotto = function(object,reduction="pca",dims=50, ...) {
  if (!is(object, "giotto")) {
    stop("object is not a giotto object")
  }
  if(reduction=="pca"){
    data=Giotto::getDimReduction(object,reduction = c("cells", "feats"),reduction_method = "pca",name = "pca",output =  "matrix",set_defaults = TRUE)
    nc=ncol(data)
    if(nc<dims){
      dims=nc
      message("dims is set higher than the number of principal components")
    }
    data=data[,1:dims]
  }
    #expression_data= Seurat::GetAssayData(brain, assay = assay)
  spat_coord = NULL

   # Giotto pipeline deals only with spatial omics data
   spat_coord=getSpatialLocations(object,spat_unit = NULL,name = NULL,output = "data.table",copy_obj = TRUE,verbose = TRUE,set_defaults = TRUE)
   xy_names=spat_coord$cell_ID 
   spat_coord=as.matrix(spat_coord[,-ncol(as.matrix(spat_coord))])
   rownames(spat_coord)=xy_names
   
      
  kk=KODAMA.matrix.parallel(data = data, spatial = spat_coord, ...)

dimObject=createDimObj(
  coordinates=matrix(0),
  name = "KODAMA",
  spat_unit = "cell",
  feat_type = "rna",
  method = "KODAMA",
  reduction = "cells",
  provenance = NULL,
  misc = kk,
  my_rownames = NULL)

  object = set_dimReduction(gobject = object, dimObject = dimObject)

  return(object)
}

#' Perform KODAMA.matrix on a Seurat object.
#' 
#' @method RunKODAMAmatrix Seurat
#' @export
#' @param assay Name of assay to retrieve the data if dimension = null.
#' @rdname RunKODAMAmatrix 
RunKODAMAmatrix.Seurat <- function (object, reduction = "pca", dims = 50, ...) 
{

  if (is.list(object)){ 
    #----------------------------------------------------------------------------#
    #                Running KODAMA on a list of Seurat objects                  #
    #----------------------------------------------------------------------------#
    for(i in seq_along(object)){
      if (!is(object[[i]], "Seurat")) {
        stop("object is not a Seurat object")
      }
    }
    for (i in seq_along(object)){
      data <- Seurat::Embeddings(object[[i]], reduction = reduction)
      nc = ncol(data)
      if (nc < dims) {
        dims = nc
        message("dims is set higher than the number of dimensions")
      }
      data = data[, 1:dims]
      spat_coord <- GetTissueCoordinates(object[[i]])
      
      kk <- KODAMAextra::KODAMA.matrix.parallel(data = data, 
                                                spatial = spat_coord, ...)
      KODAMA = CreateDimReducObject(embeddings = data[ , 1:2], 
                                    key = "Dimensions_", assay = "RNA", misc = kk)
      object[[i]]@reductions[["KODAMA"]] <- KODAMA
      
    }
  }else{
    #----------------------------------------------------------------------------#
    #                Extract from integrated  or merged Seurat object            #
    #----------------------------------------------------------------------------#
    n_slide=length(object@images)
    if (!is(object, "Seurat")) { # 1- extract data
      stop("object is not a Seurat object")
    }
    data <- Seurat::Embeddings(object, reduction = reduction)
    nc = ncol(data)
    if (nc < dims) {
      dims = nc
      message("dims is set higher than the number of dimensions")
    }
    data = data[, 1:dims]
    
    shift=c(0,0)
    spat_coord=NULL
    for (f in seq_along(object@images)){ # 2- extract coordinates
      new_slide=as.matrix(GetTissueCoordinates(object@images[[f]]))
      slide <- t(t(new_slide)+shift)
      shift=c(round(max(new_slide[,1])*1.2),0)
      spat_coord <- rbind(spat_coord, slide)
    }
      
    kk = KODAMAextra::KODAMA.matrix.parallel(data = data, spatial = spat_coord,  ...)
    KODAMA = CreateDimReducObject(embeddings = data[ , 1:2],  # should we choose larger number of dims
                                  key = "Dimensions_", assay = "RNA", misc = kk)
    object@reductions$KODAMA = KODAMA
  }
  return(object)
}



RunKODAMAvisualization.default = function(kk, ...) {

  vis <- KODAMA.visualization(kk, ...)
  return(vis)
}

RunKODAMAvisualization.SingleCellExperiment <- function(object, ...) {
  if (!is(object, "SingleCellExperiment")) {
    stop("object is not a SingleCellExperiment object")
  }
  reducedDims_KODAMA <- object@int_colData@listData[["reducedDims"]]@listData[["KODAMA"]]
  vis <- KODAMA.visualization(reducedDims_KODAMA, ...)
  object@int_colData@listData[["reducedDims"]]@listData[["KODAMA"]] <- vis
  return(object)
}

RunKODAMAvisualization.SpatialExperiment = function(object, ...) {
  if (!is(spe, "SpatialExperiment")) {
    stop("object is not a SpatialExperiment object")
  }
  reducedDims_KODAMA <- object@int_colData@listData[["reducedDims"]]@listData[["KODAMA"]]
  vis <- KODAMA.visualization(reducedDims_KODAMA, ...)
  SingleCellExperiment::reducedDim(object, "KODAMA") <- vis
  return(object)
}

RunKODAMAvisualization.Seurat = function(object, ...) {

  if (is.list(object)){ 
    for(i in seq_along(object)){
      if (!is(object[[i]], "Seurat")) {
        stop("object is not a Seurat object")
      }
    }
    for (i in seq_along(object)){
      vis=KODAMA.visualization(object[[i]]@reductions$KODAMA@misc, ...)
      KODAMA=CreateDimReducObject(
        embeddings = vis,
        key = "Dimensions_",
        assay = "RNA",
        misc=object[[i]]@reductions$KODAMA@misc
      )
      object[[i]]@reductions$KODAMA=KODAMA
      
    }
  }else{
    n_slide=length(object@images)
    if (!is(object, "Seurat")) { # 1- extract data
      stop("object is not a Seurat object")
    }
    vis=KODAMA.visualization(object@reductions$KODAMA@misc, ...)
    KODAMA=CreateDimReducObject(
      embeddings = vis,
      key = "Dimensions_",
      assay = "RNA",
      misc=object@reductions$KODAMA@misc
    )
    object@reductions$KODAMA=KODAMA

  }
  return(object)
}


RunKODAMAvisualization.giotto = function(object, ...) {
  if (!is(object, "giotto")) {
    stop("object is not a giotto object")
  }
    
  vis=KODAMA.visualization(object@dimension_reduction$cells$cell$rna$KODAMA$KODAMA@misc, ...)

dimObject=createDimObj(
  coordinates=vis,
  name = "KODAMA",
  spat_unit = "cell",
  feat_type = "rna",
  method = "KODAMA",
  reduction = "cells",
  provenance = NULL,
  misc = object@dimension_reduction$cells$cell$rna$KODAMA$KODAMA@misc,
  my_rownames = NULL)

  object = set_dimReduction(gobject = object, dimObject = dimObject,verbose = FALSE)



    
  return(object)
}


refinecluster.default = function (clusterlabels, location, shape = shape){
  t <- refine_cluster(clusterlabels, location, shape = shape) 
  return(t)
}

refinecluster.SpatialExperiment = function (object, shape = "square", assay = "Spatial"){
  if (!is(object, "SpatialExperiment")) {
    stop("object is not a SpatialExperiment object")
  }
  #   clusterlabels <- SingleCellExperiment::clusterCells(object, use.dimred="KODAMA", assay.type="logcounts")
  # should we add assay.type to be spatial?
  clusterlabels <- scran::clusterCells(object, use.dimred="KODAMA")
  location <- as.matrix(SpatialExperiment::spatialCoords(object))
  t <- refine_cluster(clusterlabels, location, shape = shape) 
  colLabels(object) <- t
  return(object)
}


refinecluster.Seurat = function (object, shape = "square"){
  if (!is(object, "Seurat")) {
    stop("object is not a Seurat object")
  }
  t=refine_cluster(object@active.ident, as.matrix(Seurat::GetTissueCoordinates(object)), shape = shape) 
  object@active.ident=as.factor(t)
  return(object)
}


refinecluster.giotto = function (object,name, shape = "square"){
  if (!is(object, "giotto")) {
    stop("object is not a Seurat object")
  }
  spat_coord=getSpatialLocations(object,spat_unit = NULL,name = NULL,output = "data.table",copy_obj = TRUE,verbose = TRUE,set_defaults = TRUE)
   xy_names=spat_coord$cell_ID 
   spat_coord=as.matrix(spat_coord[,-3])
   rownames(spat_coord)=xy_names
   cluster=object@cell_metadata$cell$rna@metaDT[,..name][[name]]
  t=refine_cluster(cluster, spat_coord, shape = shape) 
  t=data.frame(t)
  colnames(t)="refined"
  object = addCellMetadata(gobject = object,new_metadata = t)

  return(object)
}

refine_SVM = 
   function (xy, labels, samples, ...) 
   {
     samples = as.factor(samples)
     labels = as.factor(labels)
     sa = levels(samples)
     refine = rep(NA, length(labels))
     for (s in sa) {
       print(s)
       sel = samples == s
       xr = xy[sel, ]
       yr <- as.factor(as.vector(labels[sel]))
       if(length(levels(yr))>1){
         model <- svm(x = xr, y = yr, ...)
         refine[sel] <- as.vector(fitted(model))
       } else{
         refine[sel] <- yr
       }
     }
     refine = factor(refine, levels = levels(labels))
     refine
   }   
   
    
